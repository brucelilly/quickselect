/*INDENT OFF*/

/* Description: C source code for partition */
/******************************************************************************
* This software is covered by the zlib/libpng license.
* The zlib/libpng license is a recognized open source license by
* the Open Source Initiative: http://opensource.org/licenses/Zlib
* The zlib/libpng license is a recognized "free" software license by
* the Free Software Foundation: https://directory.fsf.org/wiki/License:Zlib
*******************************************************************************
******************* Copyright notice (part of the license) ********************
* $Id: ~|^` @(#)    partition_src.h copyright 2017 Bruce Lilly.   \ partition_src.h $
* This software is provided 'as-is', without any express or implied warranty.
* In no event will the authors be held liable for any damages arising from the
* use of this software.
*
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it freely,
* subject to the following restrictions:
*
* 1. The origin of this software must not be misrepresented; you must not claim
*    that you wrote the original software. If you use this software in a
*    product, an acknowledgment in the product documentation would be
*    appreciated but is not required.
*
* 2. Altered source versions must be plainly marked as such, and must not be
*    misrepresented as being the original software.
*
* 3. This notice may not be removed or altered from any source distribution.
****************************** (end of license) ******************************/
/* $Id: ~|^` @(#)   This is partition_src.h version 1.7 dated 2017-12-22T04:14:04Z. \ $ */
/* You may send bug reports to bruce.lilly@gmail.com with subject "quickselect" */
/*****************************************************************************/
/* maintenance note: master file /data/projects/automation/940/lib/libmedian/include/s.partition_src.h */

/********************** Long description and rationale: ***********************
 An implementation of multiple quickselect similar to that described by Mahmoud
 & Lent in "Average-case analysis of multiple Quickselect: An algorithm for
 finding order statistics".  The array of items to be sorted by quickselect,
 the array element size, and the comparison function are declared as for qsort,
 with two additional parameters to specify an optional array of desired order
 statistic ranks.
 N.B. the values for the order-statistic array elements are zero-based ranks
 (i.e. 0UL for the minimum, N-1UL for the maximum of an array of N elements,
 (N-1UL)/2UL and N/2UL for the lower- and upper-medians).
 The implementation can also be used to implement qsort; a wrapper function
 (which could alternatively be implemented as a macro) is provided for that
 purpose.
 In order to be able to compute the rank of array elements for selection, the
 initial array base is maintained, and a pair of indices brackets the sub-array
 being processed.  The indices correspond to the ranks of elements.  A similar
 scheme is used by Musser's introsort, described in "Introspective Sorting and
 Selection Algorithms".  The same method is used for the array of desired order
 statistic ranks, similar to that described by Lent & Mahmoud.
 Pivot selection uses Rousseeuw & Basset's remedian, described in "The Remedian:
 A Robust Averaging Method for Large Data Sets", on a sample of a size which is
 a power of 3 taken from the array elements, with sample size approximately the
 square root of the array size as described in "Optimal Sampling Strategies for
 Quicksort" by McGeoch and Tygar, and in "Optimal Sampling Strategies in
 Quicksort and Quickselect" by Martinez and Roura.
 Elements sampled from the array for use by the pivot selection methods are
 chosen to provide good overall performance, avoiding choices that would fare
 poorly for commonly-seen input sequences (e.g. organ-pipe, already-sorted).
 Partitioning uses a method described by Bentley & McIlroy, with a modification
 to reduce disorder induced in arrays.
 Comparisons are made between array elements; there is no special-case code nor
 initialization macro.
 Partitioning can still result in an unfavorable split of the initial sub-array;
 when this happens, an emergency "break-glass" pivot selection function is used
 to ensure a better split, avoiding quadratic behavior even when handling a
 worst-case input array, such as can be generated by an adversary function
 (M. D. McIlroy "A Killer Adversary for Quicksort").
 Break-glass pivot selection uses median-of-medians using sets of 3 elements
 (ignoring leftovers) and using a call to quickselect to find the median of
 medians, rather than recursion.  Aside from those details, it is similar to the
 method described by Blum, Floyd, Pratt, Rivest, & Tarjan in "Time Bounds for
 Selection".
 Swapping of elements is handled by efficient inline swap functions.  No attempt
 is made to optimize for specific array element types, but swapping can be
 performed in units of basic language types.  The swap functions avoid useless
 work (e.g. when given two pointers to the same element).  No specialized macros
 are required.
******************************************************************************/

/* Minimum _XOPEN_SOURCE version for C99 (else illumos compilation fails) */
#undef MAX_XOPEN_SOURCE_VERSION
#undef MIN_XOPEN_SOURCE_VERSION
#if defined(__STDC__) && ( __STDC_VERSION__ >= 199901L)
# define MIN_XOPEN_SOURCE_VERSION 600 /* >=600 for illumos */
#else
# define MAX_XOPEN_SOURCE_VERSION 500 /* <=500 for illumos */
#endif

/* feature test macros defined before any header files are included */
#ifndef _XOPEN_SOURCE
# ifdef MIN_XOPEN_SOURCE_VERSION
#  define _XOPEN_SOURCE MIN_XOPEN_SOURCE_VERSION
# else
#  ifdef MAX_XOPEN_SOURCE_VERSION
#   define _XOPEN_SOURCE MAX_XOPEN_SOURCE_VERSION
#  endif
# endif
#endif
#if defined(_XOPEN_SOURCE) \
&& defined(MIN_XOPEN_SOURCE_VERSION) \
&& ( _XOPEN_SOURCE < MIN_XOPEN_SOURCE_VERSION )
# undef _XOPEN_SOURCE
# define _XOPEN_SOURCE MIN_XOPEN_SOURCE_VERSION
#endif
#if defined(_XOPEN_SOURCE) \
&& defined(MAX_XOPEN_SOURCE_VERSION) \
&& ( _XOPEN_SOURCE > MAX_XOPEN_SOURCE_VERSION )
# undef _XOPEN_SOURCE
# define _XOPEN_SOURCE MAX_XOPEN_SOURCE_VERSION
#endif

#ifndef __EXTENSIONS__
# define __EXTENSIONS__ 1
#endif

/* ID_STRING_PREFIX file name and COPYRIGHT_DATE are constant, other components
   are version control fields.
   ID_STRING_PREFIX is suitable for the what(1) and ident(1) utilities.
   MODULE_DATE uses modern SCCS extensions.
*/
#undef ID_STRING_PREFIX
#undef SOURCE_MODULE
#undef MODULE_VERSION
#undef MODULE_DATE
#undef COPYRIGHT_HOLDER
#undef COPYRIGHT_DATE
#define ID_STRING_PREFIX "$Id: partition_src.h ~|^` @(#)"
#define SOURCE_MODULE "partition_src.h"
#define MODULE_VERSION "1.7"
#define MODULE_DATE "2017-12-22T04:14:04Z"
#define COPYRIGHT_HOLDER "Bruce Lilly"
#define COPYRIGHT_DATE "2017"

/* Although the implementation is different, several concepts are adapted from:
   qsort -- qsort interface implemented by faster quicksort.
   J. L. Bentley and M. D. McIlroy, SPE 23 (1993) 1249-1265.
   Copyright 1993, John Wiley.
   Also using modifications to avoid self-swapping from:
   Partitioning schemes for quicksort and quickselect, Krzysztof C. Kiwiel.
   And avoiding recomparisons as suggested in:
   Optimal Sampling Strategies for Quicksort, McGeoch, C. C. and Tygar, J. D.
*/

/* local header files needed */
#include "quickselect_config.h"
#include "exchange.h"           /* alignment_size blockmove reverse irotate protate swapn EXCHANGE_SWAP */
#include "indirect.h"           /* set_array_pointers rearrange_array */
#if ! QUICKSELECT_BUILD_FOR_SPEED
#include "initialize_src.h"
#endif /* QUICKSELECT_BUILD_FOR_SPEED */

/* for assert.h */
#if ! ASSERT_CODE
# define NDEBUG 1
#endif

/* system header files */
#include <assert.h>             /* assert */
#include <stddef.h>             /* size_t NULL */
#if ASSERT_CODE
# include <stdio.h>
#endif

#if __STDC_WANT_LIB_EXT1__
/* Preliminary support for 9899:201x draft N1570 qsort_s w/ "context".
   "context" is similar to glibc qsort_r; N1570 also has provision for
   runtime-constraint violation detection and handling. "Preliminary"
   because of the apparent lack of a convincing use-case for "context" and
   due to the poorly defined semantics and interface for constraint
   violation handling.

   Consequences of "context" are wide-ranging: any operation that requires
   comparisons (pivot selection, partitioning, dedicated sorting and/or
   selection, and support functions for any of those) has to be rewritten.
   The only operations unaffected are sampling, basic swaps, blockmoves using
   swaps, rank comparisons, and partition size evaluation; sampling and
   repivoting tables may also be reused without change.
   Executable code size is roughly doubled, not including external
   constraint-handler function code.
   Use case of "context" is questionable; one could simply use an appropriate
   comparison function.  Published supposed examples (e.g.
   https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/qsort-s
   tend to be rather silly (in the specific example above:
      1. functions are defined for specific locales, but not specifically
         implementing locale-specific collation -- one could at least as easily
         define locale-specific string comparison functions using the standard
         strcoll [+] function and use these with qsort to perform the
         locale-specific sorts with no need for "context", and avoiding the
         other implementation issues detailed below.
      2. Aside from inconsistent "context" argument order...
      3. ... the implementation comparison function copies (!) (leading portions
         of) supplied strings to fixed size (!!)[*] local buffers, then makes a
         second set of passes (!!!) over the copies to perform a conversion
         (which is discarded (!!!!) when the comparison function returns), which
         is then subjected to a third (!!!!!) pass to perform the comparison.
         Note that qsort implementations typically call the comparison function
         N log N times for an array of N elements; the above implementation
         makes 2 N log N copies and 6 N log N passes over data representing
         the strings to be sorted.  In particular, at each stage of partitioning
         qsort implementations compare a pivot element to many other elements;
         in the above implementation the string corresponding to that pivot
         element is copied, the copy modified and examined, only to be discarded
         before repeating those steps anew with the same pivot element's string
         for the next comparison.
      4. Although the copies (see #3 above) ignore the actual length of the
         original strings, strlen is subsequently called for each string (copy),
         resulting in a fourth (!!!!!!) pass over the data. Had strlen been
         called for the initial strings, the copies could have been made
         appropriate sizes (assuming that one still naively wished to make, then
         discard such copies).
      * a possibly-valid use of "context" *might* be to provide the maximum
        string length, avoiding magic numbers and failure to fully compare
        strings which have long identical leading substrings... *if* one
        insisted on the naive implementation involving copies (which are
        subsequently discarded) and multiple passes over the data.  It would
        be much more efficient to make one-time initial transformations (e.g.
        w/ strxfrm [+]) of the original string data supplemented by an index
        indicating the original order (or a pointer to the original string
        data), sorting the transformed and supplemented data using standard
        strcmp on the transformed strings.  That would involve N combined
        transformations and copies (instead of N log N copies and N log N
        transformations) plus N log N standard strcmp string comparisons (rather
        than 6 N log N passes over data), followed by access of the orginal
        string data via the indices or pointers for output.
      + Note that strcoll and strxfrm have been standardized since C89 (a.k.a.
        C90).
   ). In summary, there is no convincing use-case for "context" to justify
   doubling the size of library code.
*/
#endif /* __STDC_WANT_LIB_EXT1__ */

#if ! QUICKSELECT_BUILD_FOR_SPEED
/* declaration */
#include "partition_decl.h"
;
#endif /* QUICKSELECT_BUILD_FOR_SPEED */

#if QUICKSELECT_STABLE
/* merge 2 adjacent canonical partitions */
/* +-----------------------------+
   | L< | L= | L> | R< | R= | R> |
   +-----------------------------+
    |    |    |    |    |    |   |
    (l)  eq1  gt1  mid  eq2  gt2  (u)
     |    \       X       /    |
     |     \     / \     /     |
     |      \   /   \   /      |
     |       \ /     \ /       |
     |        X       X        |
     v       / \     / \       v
   +-----------------------------+
   | L< | R< | L= | R= | L> | R> |
   +-----------------------------+
  Preservation of ordering within blocks and between blocks of like types
  results in stable partitoning, stable sort or selection.
  3 methods each consisting of 2 rotations may be used:
  1a.      <---------
   +-----------------------------+
   | L< | R< | L= | L> | R= | R> |
   +-----------------------------+
  1b.                  X
   +-----------------------------+
   | L< | R< | L= | R= | L> | R> |
   +-----------------------------+
  2a.           <---------
   +-----------------------------+
   | L< | L= | R< | R= | L> | R> |
   +-----------------------------+
  2b.        X
   +-----------------------------+
   | L< | R< | L= | R= | L> | R> |
   +-----------------------------+
  3a.      <--------------
   +-----------------------------+
   | L< | R< | R= | L= | L> | R> |
   +-----------------------------+
  3b.             X
   +-----------------------------+
   | L< | R< | L= | R= | L> | R> |
   +-----------------------------+
  One method is chosen depending on the region sizes so as to minimize the
  total number of swaps.
*/
static QUICKSELECT_INLINE
void merge_partitions(char *base, size_t first, size_t eq1, size_t gt1,
    size_t mid, size_t eq2, size_t gt2, size_t beyond, size_t size,
    void (*swapf)(char *, char *, size_t), size_t alignsize, size_t size_ratio,
    size_t *peq, size_t *pgt)
{
    register size_t leq=gt1-eq1, req=gt2-eq2, rlt=eq2-mid;
    size_t lgt=mid-gt1, m=(lgt<rlt?lgt:rlt); /* minimum of lgt, rlt */

    A(first<mid);A(mid<beyond);
    A(first<=eq1);A(eq1<=gt1);A(gt1<=mid);
    A(mid<=eq2);A(eq2<=gt2);A(gt2<=beyond);
    /* +-----------------------------+ */
    /* | L< | L= | L> | R< | R= | R> | */
    /* +-----------------------------+ */
    /* (l)  eq1  gt1  mid  eq2  gt2  (u) */
    if ((0UL==leq)||(0UL==req)||(leq+req<m)) { /* method 3 */
        irotate(base,eq1,mid,gt2,size,swapf,alignsize,size_ratio);
        /* +-----------------------------+ */
        /* | L< | R< | R= | L= | R> | R> | */
        /* +-----------------------------+ */
        /* (l)  eq1  gt1  mid  eq2  gt2  (u) */
        if (0UL<leq+req) {
            gt1=eq1+rlt, mid=gt1+req, eq2=mid+leq;
            irotate(base,gt1,mid,eq2,size,swapf,alignsize,size_ratio);
        }
    } else if (lgt<rlt) { /* method 2 */
        irotate(base,gt1,mid,gt2,size,swapf,alignsize,size_ratio);
        /* +-----------------------------+ */
        /* | L< | L= | R< | R= | L> | R> | */
        /* +-----------------------------+ */
        /* (l)  eq1  gt1  mid  eq2  gt2  (u) */
        mid=gt1+rlt, eq2=mid+req;
        irotate(base,eq1,gt1,mid,size,swapf,alignsize,size_ratio);
    } else { /* method 1 */
        irotate(base,eq1,mid,eq2,size,swapf,alignsize,size_ratio);
        /* +-----------------------------+ */
        /* | L< | R< | L= | L> | R= | R> | */
        /* +-----------------------------+ */
        /* (l)  eq1  gt1  mid  eq2  gt2  (u) */
        gt1=eq1+rlt, mid=gt1+leq;
        irotate(base,mid,eq2,gt2,size,swapf,alignsize,size_ratio);
    }
    /* +-----------------------------+ */
    /* | L< | R< | L= | R= | L> | R> | */
    /* +-----------------------------+ */
    /* (l)  eq1  gt1  mid  eq2  gt2  (u) */
    *peq=gt1=eq1+rlt, mid=gt1+leq, *pgt=eq2=mid+req;
}
#endif

/* array partitioning */
#if QUICKSELECT_BUILD_FOR_SPEED
static QUICKSELECT_INLINE
#endif /* QUICKSELECT_BUILD_FOR_SPEED */
#include "partition_decl.h"
{
    char *pa, *ph, *pl, *pu;
    register char *pb, *pg;
    int c=0, d=0;

#if ! QUICKSELECT_BUILD_FOR_SPEED
    if ((char)0==file_initialized) initialize_file(__FILE__);
#endif /* QUICKSELECT_BUILD_FOR_SPEED */
    switch (options&(QUICKSELECT_STABLE)) {
        default:
            /* McGeoch & Tygar suggest that partial partition information from
               median-of-medians might be used to avoid recomparisons during
               repartitioning.
               Ref: McGeoch, C. & Tygar, J. "Optimal sampling strategies for quicksort"
            */
            /* Partition, avoiding recomparison of already partitioned (by
               median-of-medians) elements.  Similar to Kiwiel's algorithm L
               modification of Bentley & McIlroy partitioning.
            */
            A(base+first*size<=pivot);A(pivot<base+beyond*size);
            A(pd<=pivot);A(pivot<pe);A(pc<=pd);A(pe<=pf);
            pa=pb=pl=base+size*first, pg=(ph=pu=base+size*beyond)-size;
            /* +-----------------------------------------------------+ */
            /* |           ?         : < :=: > :         ?           | */
            /* +-----------------------------------------------------+ */
            /*  pl                    c   d e   f                   g u*/
            /*  a                                                     h*/
            /*  b                                                      */
            /* Rearrange blocks for split-end partition. */
            /* Region [c,f) is already-partitioned region. N.B. region is actually at
               far left, i.e. pointer pc==pl.
            */
            /* Generic blockmoves would be equivalent to swap of the pivot with the
               first element for pivot(==pd) only (pc==pd,pe==pf==pd+size), but
               simply swap pivot-only to first or last position.
            */
            A(pc<=pd);A(pd<pe);A(pe<=pf);A(pf<=pu); /* at least pivot */
            if (pc+size==pf) { /* pc==pd&&pd+size==pf (pivot only) */
                A(pl<=pc);A(pl<=pd);A(pe<=pu); /* reasonable bounds, pivot in region */
                if (pivot-pl<pu-pivot) { /* pivot @ middle or closer to first element */
                    if (pl!=pivot) {
                        ph=pg;
                        EXCHANGE_SWAP(swapf,ph,pivot,size,alignsize,size_ratio,
                            /**/);
                        pg=(pivot=ph)-size;
                    } else pa+=size, pb=pa;
                } else { /* pivot is closer to last element */
                    if (pg!=pivot) {
                        EXCHANGE_SWAP(swapf,pl,pivot,size,alignsize,size_ratio,
                            /**/);
                        pa=pb=(pivot=pl)+size;
                    } else pivot=ph=pg, pg-=size;
                }
                A((pivot==pl)||((pivot==ph)&&(ph+size==pu)));
                A((pl<pa)||(ph<pu)); /* must have pivot somewhere */
                A(pa==pb);A(pg+size==ph);
            } else {
                A(pl==pc); /* already-partitioned region is at far left */
                pd=blockmove(pc,pd,pe,swapf); /* swap already-partitioned < and = */
                pivot=pc;
                /* +-----------------------------------------------------+ */
                /* |           ?         :=: < : > :         ?           | */
                /* +-----------------------------------------------------+ */
                /*  pl                    c d   e   f                   g u*/
                /*  a                                                     h*/
                /*  b                                                      */
                pg=blockmove(pe,pf,ph,swapf)-size; /* already-partitioned > to right */
                /* N.B.  -size  in above statement */
                /* +-----------------------------------------------------+ */
                /* |           ?         :=: < :          ?          | > | */
                /* +-----------------------------------------------------+ */
                /*  pl                    c d   e   f               g     u*/
                /*  a                                                     h*/
                /*  b                                                      */
                A(pc<pd); /* at least pivot in [pc,pd) */
#if 1
                /* swap = block to far left; N.B. for pl==pc, this simply sets pa=pd */
                pa=blockmove(pl,pc,pd,swapf);
                pivot=pl;
#else
                pa=pd;
#endif
                /* +-----------------------------------------------------+ */
                /* | = |         ?         : < :          ?          | > | */
                /* +-----------------------------------------------------+ */
                /*  pl  a                 c d   e   f               g     u*/
                /*  b                                                     h*/
                A(pa==pd);A(pd<=pe);
#if 1
                /* swap already-partitioned < leftward; N.B. for pa==pd, pb=pe */
                pb=blockmove(pa,pd,pe,swapf);
#else
                pb=pe;
#endif
                /* +-----------------------------------------------------+ */
                /* | = |  <  |                 ?                     | > | */
                /* +-----------------------------------------------------+ */
                /*  pl  a     b           c d   e   f               g     u*/
                /*                                                        h*/
                A(pa>pl);
                if (pa>pl) pivot=pa-size; else pivot=pl; /* pivot in = block */
            }
#if QUICKSELECT_INDIRECT
            if (0U==(options&(QUICKSELECT_INDIRECT))) { /* direct */
#endif /* QUICKSELECT_INDIRECT */
                /* +-----------------------------------------------------+ */
                /* | = |  <  |                ?                  |  >  |=| */
                /* +-----------------------------------------------------+ */
                /*  pl  a     b->         c   d e   f         <-g       h u*/
                /* Skip over = elements at left; then < elements at left, swapping
                   additional = elements to far left. Stop at out-of-place element or when
                   pointers pb and pg cross.
                */
                if (pa==pb) {
                    while ((pb<=pg)&&(0==(c=COMPAR(pivot,pb,context)))) { pb+=size; }
                    pa=pb;
                    if (0<c)
                        for (pb+=size; (pb<=pg)&&(0<=(c=COMPAR(pivot,pb,context))); pb+=size)
                            if (0==c) { A(pa!=pb);
                                EXCHANGE_SWAP(swapf,pa,pb,size,alignsize,size_ratio,
                                    /**/);
                                pa+=size;
                            }
                } else {
                    for (; (pb<=pg)&&(0<=(c=COMPAR(pivot,pb,context))); pb+=size)
                        if (0==c) { A(pa!=pb);
                            EXCHANGE_SWAP(swapf,pa,pb,size,alignsize,size_ratio,
                                /**/);
                            pa+=size;
                        }
                }
                /* Skip over = elements at right; then > elements at right, swapping
                   additional = elements to far right. Stop at out-of-place element or when
                   pointers pb and pg meet.
                */
                if (pg==ph-size) {
                    while ((pb<pg)&&(0==(d=COMPAR(pivot,pg,context)))) { pg-=size; }
                    ph=pg+size;
                    if (0>d)
                        for (pg-=size; (pb<pg)&&(0>=(d=COMPAR(pivot,pg,context))); pg-=size)
                            if (0==d) { A(pg!=ph-size);
                                ph-=size;
                                EXCHANGE_SWAP(swapf,pg,ph,size,alignsize,size_ratio,
                                    /**/);
                            }
                } else {
                    for (; (pb<pg)&&(0>=(d=COMPAR(pivot,pg,context))); pg-=size)
                        if (0==d) { A(pg!=ph-size);
                            ph-=size;
                            EXCHANGE_SWAP(swapf,pg,ph,size,alignsize,size_ratio,
                                /**/);
                        }
                }
                /* +-----------------------------------------------------+ */
                /* | = |  <  |>|              ?              |<|  >  | = | */
                /* +-----------------------------------------------------+ */
                /*  pl  a     b->         c   d e   f       <-g       h   u*/
                /* Swap out-of-place elements, skip over in-place elements, swap = elements
                   to nearest end. Stop when pointers pb and pg meet.
                */
                while (pb<pg) {
                    EXCHANGE_SWAP(swapf,pb,pg,size,alignsize,size_ratio,/**/);
                    pb+=size, pg-=size;
                    for (; (pb<=pg)&&(0<=(c=COMPAR(pivot,pb,context))); pb+=size)
                        if (0==c) { A(pa!=pb);
                            EXCHANGE_SWAP(swapf,pa,pb,size,alignsize,size_ratio,
                                /**/);
                            pa+=size;
                        }
                    for (; (pb<pg)&&(0>=(d=COMPAR(pivot,pg,context))); pg-=size)
                        if (0==d) { A(pg!=ph-size);
                            ph-=size;
                            EXCHANGE_SWAP(swapf,pg,ph,size,alignsize,size_ratio,
                                /**/);
                        }
                }
#if QUICKSELECT_INDIRECT
            } else { /* indirect */
                pivot=*((char **)pivot);
                /* +-----------------------------------------------------+ */
                /* | = |  <  |                ?                  |  >  |=| */
                /* +-----------------------------------------------------+ */
                /*  pl  a     b->         c   d e   f         <-g       h u*/
                /* Skip over = elements at left; then < elements at left, swapping
                   additional = elements to far left. Stop at out-of-place element or when
                   pointers pb and pg cross.
                */
                if (pa==pb) {
                    while ((pb<=pg)&&(0==(c=COMPAR(pivot,*((char **)pb),context)))) { pb+=size; }
                    pa=pb;
                    if (0<c)
                        for (pb+=size; (pb<=pg)&&(0<=(c=COMPAR(pivot,*((char **)pb),context))); pb+=size)
                            if (0==c) { A(pa!=pb);
                                EXCHANGE_SWAP(swapf,pa,pb,size,alignsize,size_ratio,
                                    /**/);
                                pa+=size;
                            }
                } else {
                    for (; (pb<=pg)&&(0<=(c=COMPAR(pivot,*((char **)pb),context))); pb+=size)
                        if (0==c) { A(pa!=pb);
                            EXCHANGE_SWAP(swapf,pa,pb,size,alignsize,size_ratio,
                                /**/);
                            pa+=size;
                        }
                }
                /* Skip over = elements at right; then > elements at right, swapping
                   additional = elements to far right. Stop at out-of-place element or when
                   pointers pb and pg meet.
                */
                if (pg==ph-size) {
                    while ((pb<pg)&&(0==(d=COMPAR(pivot,*((char **)pg),context)))) { pg-=size; }
                    ph=pg+size;
                    if (0>d)
                        for (pg-=size; (pb<pg)&&(0>=(d=COMPAR(pivot,*((char **)pg),context))); pg-=size)
                            if (0==d) { A(pg!=ph-size);
                                ph-=size;
                                EXCHANGE_SWAP(swapf,pg,ph,size,alignsize,size_ratio,
                                    /**/);
                            }
                } else {
                    for (; (pb<pg)&&(0>=(d=COMPAR(pivot,*((char **)pg),context))); pg-=size)
                        if (0==d) { A(pg!=ph-size);
                            ph-=size;
                            EXCHANGE_SWAP(swapf,pg,ph,size,alignsize,size_ratio,
                                /**/);
                        }
                }
                /* +-----------------------------------------------------+ */
                /* | = |  <  |>|              ?              |<|  >  | = | */
                /* +-----------------------------------------------------+ */
                /*  pl  a     b->         c   d e   f       <-g       h   u*/
                /* Swap out-of-place elements, skip over in-place elements, swap = elements
                   to nearest end. Stop when pointers pb and pg meet.
                */
                while (pb<pg) {
                    EXCHANGE_SWAP(swapf,pb,pg,size,alignsize,size_ratio,/**/);
                    pb+=size, pg-=size;
                    for (; (pb<=pg)&&(0<=(c=COMPAR(pivot,*((char **)pb),context))); pb+=size)
                        if (0==c) { A(pa!=pb);
                            EXCHANGE_SWAP(swapf,pa,pb,size,alignsize,size_ratio,
                                /**/);
                            pa+=size;
                        }
                    for (; (pb<pg)&&(0>=(d=COMPAR(pivot,*((char **)pg),context))); pg-=size)
                        if (0==d) { A(pg!=ph-size);
                            ph-=size;
                            EXCHANGE_SWAP(swapf,pg,ph,size,alignsize,size_ratio,
                                /**/);
                        }
                }
            }
#endif /* QUICKSELECT_INDIRECT */
            /* Split-end partition complete; swap = blocks to middle to canonicalize. */
            /* +-----------------------------------------------------+ */
            /* | = |            <         |           >          | = | */
            /* +-----------------------------------------------------+ */
            /*  pl  a                      b                      h   u*/
            /*                           g g                           */
            A((pl<pa)||(ph<pu)); /* must have pivot somewhere */
            if (pb>=pa) pd=blockmove(pl,pa,pb,swapf); else pd=pb;
            pe=blockmove(pb,ph,pu,swapf);
            A(pl<=pd); A(pd<pe); A(pe<=pu);
            /* Canonical partition */
            /* +-----------------------------------------------------+ */
            /* |           <            |   =   |          >         | */
            /* +-----------------------------------------------------+ */
            /*  pl                       d       e                    u*/
            /* Set indices of first elements of = and > blocks (bracketing = region). */
            *peq=(pd-base)/size;
            *pgt=(pe-base)/size;
        break;
#if QUICKSELECT_STABLE
        case QUICKSELECT_STABLE :
# if QUICKSELECT_LINEAR_STABLE
            if ((NULL!=conditions)&&(NULL!=indices)) {
                /* linear-time stable partition using O(N) extra space */
                register size_t i, ieq, igt;

                pl=base+size*first, pu=base+size*beyond;
                /* 1st scan: left-to-right to get element partial order and set
                   pointer for < elements.
                */
                /* split into pre-pivot, pivot, post-pivot */
#  if QUICKSELECT_INDIRECT
                /* further split into direct, indirect for pivot cache */
                if (0U==(options&(QUICKSELECT_INDIRECT))) { /* direct */
#  endif /* QUICKSELECT_INDIRECT */
                    for (i=ieq=first,pb=pl,pg=pivot; pb<pg; pb+=size,i++) {
                        c=COMPAR(pb,pg,context);
                        if (0<c) conditions[i]=(char)1;
                        else if (0==c) conditions[i]=(char)0;
                        else {
                            conditions[i]=(char)(-1);
                            indices[ieq++]=i;
                        }
                    }
                    A(pb==pg);
                    conditions[i]=(char)0;
                    for (++i,pb+=size; pb<pu; pb+=size,i++) {
                        c=COMPAR(pb,pg,context);
                        if (0<c) conditions[i]=(char)1;
                        else if (0==c) conditions[i]=(char)0;
                        else {
                            conditions[i]=(char)(-1);
                            indices[ieq++]=i;
                        }
                    }
#  if QUICKSELECT_INDIRECT
                } else { /* indirect; pivot data pointer cached */
                    pg=*((char **)pivot);
                    for (i=ieq=first,pb=pl; pb<pivot; pb+=size,i++) {
                        c=COMPAR(*((char **)pb),pg,context);
                        if (0<c) conditions[i]=(char)1;
                        else if (0==c) conditions[i]=(char)0;
                        else {
                            conditions[i]=(char)(-1);
                            indices[ieq++]=i;
                        }
                    }
                    A(pb==pivot);
                    conditions[i]=(char)0;
                    for (++i,pb+=size; pb<pu; pb+=size,i++) {
                        c=COMPAR(*((char **)pb),pg,context);
                        if (0<c) conditions[i]=(char)1;
                        else if (0==c) conditions[i]=(char)0;
                        else {
                            conditions[i]=(char)(-1);
                            indices[ieq++]=i;
                        }
                    }
                }
#  endif /* QUICKSELECT_INDIRECT */
                *peq=ieq;
                /* 2nd scan: right-to-left to set pointers for > elements. */
                for (igt=beyond,i=igt-1UL,pb=pu-size; pb>=pl; pb-=size,i--)
                    if (0<conditions[i]) indices[--igt]=i;
                *pgt=igt;
                /* 3rd scan: left to right to set pointers for == elements. */
                for (i=first,pb=pl; ieq<igt; pb+=size,i++) {
                    if (0==conditions[i]) indices[ieq++]=i;
                    A(pb<pu);A(i<beyond);
                }
                i=rearrange_array(base,beyond-first,size,indices,
                    beyond-first,first,beyond,element);
                A(beyond-first>(i>>1));
            } else {
# endif /* QUICKSELECT_LINEAR_STABLE */
                /* divide-and-conquer partition */
                pl=base+size*first, pu=base+size*beyond;

                A(pl<pu);A(pc<pf);
                if (pl+size==pu) { /* 1 element */
                    if (pivot!=pl) { /* external pivot */
                        c=OPT_COMPAR(pivot,pl,options,context);
                        if (0<c) *peq=*pgt=beyond;
                        else if (0>c) *peq=*pgt=first;
                        else *peq=first, *pgt=beyond;
                    } else *peq=first, *pgt=beyond; /* pivot */
                } else { /* more than 1 element */
                    if ((pl<=pc)&&(pf<=pu)) { /* pivot is in region */
                        /* already-partitioned region is one partition; zero, one,
                           or two others
                        */
                        if ((pl==pc)&&(pf==pu)) { /* already fully partitioned */
                            ;
                        } else if (pl==pc) { /* already-partitioned at left end */
                            /* partition unpartitioned region and merge */
                            A(pf<pu);
                            PARTITION_FUNCTION_NAME(base,(pf-base)/size,beyond,pc,
                                pd,pivot,pe,pf,size,COMPAR_ARGS,swapf,alignsize,
                                size_ratio,options,conditions,indices,
                                element,peq,pgt);
                            A(*peq<=*pgt);A((pf-base)/size<=*peq);A(*pgt<=beyond);
                            merge_partitions(base,first,(pd-base)/size,
                                (pe-base)/size,(pf-base)/size,*peq,*pgt,beyond,size,
                                swapf,alignsize,size_ratio,peq,pgt);
                        } else if (pu==pf) { /* already-partitioned at right end */
                            /* partition unpartitioned region and merge */
                            A(pl<pc);
                            PARTITION_FUNCTION_NAME(base,first,(pc-base)/size,pc,pd,
                                pivot,pe,pf,size,COMPAR_ARGS,swapf,alignsize,
                                size_ratio,options,conditions,indices,
                                element,peq,pgt);
                            A(*peq<=*pgt);A(first<=*peq);A(*pgt<=(pc-base)/size);
                            merge_partitions(base,first,*peq,*pgt,(pc-base)/size,
                                (pd-base)/size,(pe-base)/size,beyond,size,swapf,
                                alignsize,size_ratio,peq,pgt);
                        } else { /* already-partitioned in middle */
                            size_t eq2, gt2;
                            /* partition unpartitioned regions and merge */
                            A(pl<pc);
                            PARTITION_FUNCTION_NAME(base,first,(pc-base)/size,pc,pd,
                                pivot,pe,pf,size,COMPAR_ARGS,swapf,alignsize,
                                size_ratio,options,conditions,indices,
                                element,peq,pgt);
                            A(*peq<=*pgt);A(first<=*peq);A(*pgt<=(pc-base)/size);
                            merge_partitions(base,first,*peq,*pgt,(pc-base)/size,
                                (pd-base)/size,(pe-base)/size,(pf-base)/size,size,
                                swapf,alignsize,size_ratio,peq,pgt);
                            A(*peq<=*pgt);A(first<=*peq);A(*pgt<=(pf-base)/size);
                            A(pf<pu);
                            PARTITION_FUNCTION_NAME(base,(pf-base)/size,beyond,pl,
                                base+*peq*size,base+*peq*size,base+*pgt*size,pf,
                                size,COMPAR_ARGS,swapf,alignsize,size_ratio,
                                options,conditions,indices,
                                element,&eq2,&gt2);
                            A(eq2<=gt2);A((pf-base)/size<=eq2);A(gt2<=beyond);
                            merge_partitions(base,first,*peq,*pgt,(pf-base)/size,
                                eq2,gt2,beyond,size,swapf,alignsize,size_ratio,peq,
                                pgt);
                        }
                    } else { /* external pivot; split into two regions; partition & merge */
                        size_t mid=first+((beyond-first)>>1), eq2, gt2;
                        PARTITION_FUNCTION_NAME(base,first,mid,pc,pd,pivot,pe,pf,
                                size,COMPAR_ARGS,swapf,alignsize,size_ratio,
                                options,conditions,indices,
                                element,peq,pgt);
                        A(first<mid);A(mid<beyond);
                        PARTITION_FUNCTION_NAME(base,mid,beyond,pc,pd,pivot,pe,pf,
                                size,COMPAR_ARGS,swapf,alignsize,size_ratio,
                                options,conditions,indices,
                                element,&eq2,&gt2);
                        merge_partitions(base,first,*peq,*pgt,mid,eq2,gt2,beyond,
                                size,swapf,alignsize,size_ratio,peq,pgt);
                    }
                }
# if QUICKSELECT_LINEAR_STABLE
            }
# endif /* QUICKSELECT_LINEAR_STABLE */
        break;
#endif /* QUICKSELECT_STABLE */
    }
}
