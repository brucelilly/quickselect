/*INDENT OFF*/

#ifndef	QUICKSELECT_CONFIG_H_INCLUDED
/* Description: configuration macros for quickselect and qsort plus variants */
/******************************************************************************
* This software is covered by the zlib/libpng license.
* The zlib/libpng license is a recognized open source license by
* the Open Source Initiative: http://opensource.org/licenses/Zlib
* The zlib/libpng license is a recognized "free" software license by
* the Free Software Foundation: https://directory.fsf.org/wiki/License:Zlib
*******************************************************************************
******************* Copyright notice (part of the license) ********************
* $Id: ~|^` @(#)    quickselect_config.h copyright 2017 Bruce Lilly.   \ quickselect_config.h $
* This software is provided 'as-is', without any express or implied warranty.
* In no event will the authors be held liable for any damages arising from the
* use of this software.
*
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it freely,
* subject to the following restrictions:
*
* 1. The origin of this software must not be misrepresented; you must not claim
*    that you wrote the original software. If you use this software in a
*    product, an acknowledgment in the product documentation would be
*    appreciated but is not required.
*
* 2. Altered source versions must be plainly marked as such, and must not be
*    misrepresented as being the original software.
*
* 3. This notice may not be removed or altered from any source distribution.
****************************** (end of license) ******************************/
/* $Id: ~|^` @(#)   This is quickselect_config.h version 1.4 dated 2017-11-06T16:37:36Z. \ $ */
/* You may send bug reports to bruce.lilly@gmail.com with subject "quickselect" */
/*****************************************************************************/
/* maintenance note: master file /data/projects/automation/940/lib/libmedian/include/s.quickselect_config.h */

/********************** Long description and rationale: ***********************
 An implementation of multiple quickselect similar to that described by Mahmoud
 & Lent in "Average-case analysis of multiple Quickselect: An algorithm for
 finding order statistics".  The array of items to be sorted by quickselect,
 the array element size, and the comparison function are declared as for qsort,
 with two additional parameters to specify an optional array of desired order
 statistic ranks.
 N.B. the values for the order-statistic array elements are zero-based ranks
 (i.e. 0UL for the minimum, N-1UL for the maximum of an array of N elements,
 (N-1UL)/2UL and N/2UL for the lower- and upper-medians).
 The implementation can also be used to implement qsort; a wrapper function
 (which could alternatively be implemented as a macro) is provided for that
 purpose.
 In order to be able to compute the rank of array elements for selection, the
 initial array base is maintained, and a pair of indices brackets the sub-array
 being processed.  The indices correspond to the ranks of elements.  A similar
 scheme is used by Musser's introsort, described in "Introspective Sorting and
 Selection Algorithms".  The same method is used for the array of desired order
 statistic ranks, similar to that described by Lent & Mahmoud.
 Pivot selection uses Rousseeuw & Basset's remedian, described in "The Remedian:
 A Robust Averaging Method for Large Data Sets", on a sample of a size which is
 a power of 3 taken from the array elements, with sample size approximately the
 square root of the array size as described in "Optimal Sampling Strategies for
 Quicksort" by McGeoch and Tygar, and in "Optimal Sampling Strategies in
 Quicksort and Quickselect" by Martinez and Roura.
 Elements sampled from the array for use by the pivot selection methods are
 chosen to provide good overall performance, avoiding choices that would fare
 poorly for commonly-seen input sequences (e.g. organ-pipe, already-sorted).
 Partitioning uses a method described by Bentley & McIlroy, with a modification
 to reduce disorder induced in arrays.
 Comparisons are made between array elements; there is no special-case code nor
 initialization macro.
 Partitioning can still result in an unfavorable split of the initial sub-array;
 when this happens, an emergency "break-glass" pivot selection function is used
 to ensure a better split, avoiding quadratic behavior even when handling a
 worst-case input array, such as can be generated by an adversary function
 (M. D. McIlroy "A Killer Adversary for Quicksort").
 Break-glass pivot selection uses median-of-medians using sets of 3 elements
 (ignoring leftovers) and using a call to quickselect to find the median of
 medians, rather than recursion.  Aside from those details, it is similar to the
 method described by Blum, Floyd, Pratt, Rivest, & Tarjan in "Time Bounds for
 Selection".
 Swapping of elements is handled by efficient inline swap functions.  No attempt
 is made to optimize for specific array element types, but swapping can be
 performed in units of basic language types.  The swap functions avoid useless
 work (e.g. when given two pointers to the same element).  No specialized macros
 are required.
******************************************************************************/

/* version-controlled header file version information */
#define QUICKSELECT_CONFIG_H_VERSION "quickselect_config.h 1.4 2017-11-06T16:37:36Z"

/* compile-time configuration options */
/* assertions for validation testing */
#ifndef ASSERT_CODE
# define ASSERT_CODE                     0 /* Adds size & cost to aid debugging.
                                              0 for tested production code. */
                                           /* If ASSERT_CODE > 1, assertions
                                              might also affect the number of
                                              comparisons used.
                                           */
#endif

/* tuning */
/* static inline or separate major functions */
#define QUICKSELECT_BUILD_FOR_SPEED      1

/* Repivoting parameters control the tradeoff between minimal effect on random
   inputs and effective repivoting of adverse inputs.
   Choices are (defined by macros later):
    DISABLED    repivot only under extreme circumstances
    TRANSPARENT (almost) no repivots for random inputs
    LOOSE       worst adverse sorting performance < 2.0 N log(N)
    RELAXED     adverse input sorting performance < 1.5 N log(N)
    AGGRESSIVE  best practical adverse input selection performance
# define SORTING_TABLE_ENTRIES           DISABLED
# define SORTING_TABLE_ENTRIES           TRANSPARENT
# define SORTING_TABLE_ENTRIES           LOOSE
# define SORTING_TABLE_ENTRIES           RELAXED
# define SORTING_TABLE_ENTRIES           AGGRESSIVE
*/
#ifndef SORTING_TABLE_ENTRIES
# undef DISABLED
# undef TRANSPARENT
# undef LOOSE
# undef RELAXED
# undef AGGRESSIVE
# define SORTING_TABLE_ENTRIES           RELAXED
#endif

/* Sorting network for 3 elements can be arranged to favor already-sorted and
   reverse-sorted inputs (1), or to favor bitonic inputs (0).
*/
#define FAVOR_SORTED                     0

/* It is possible to override configuration in quickselect.h here.
   Command-line compilation arguments can override this.
*/
#ifndef QUICKSELECT_STABLE
# if 1
#  define QUICKSELECT_STABLE             0x01U
# else
#  define QUICKSELECT_STABLE             0
# endif
#endif
#ifndef QUICKSELECT_NETWORK_MASK
# if 0
#  define QUICKSELECT_NETWORK_MASK       0x01FF8U /* 3-12 */
# else
#  if 1
#   define QUICKSELECT_NETWORK_MASK      0x08U /* 3 only */
#  else
#   define QUICKSELECT_NETWORK_MASK      0x0U
#  endif
# endif
#endif

/* Nothing to configure below this line. */

/* defaults */
#ifndef SORTING_TABLE_ENTRIES
# define SORTING_TABLE_ENTRIES RELAXED
#endif

#define SELECTION_MIN_REPIVOT            9UL

/* repivot tuning */
#define DISABLED    0
#define TRANSPARENT 1 /* (almost) no repivots for random inputs */
#define LOOSE       2 /* adversary < 2.0 N log N */
#define RELAXED     3 /* adversary < 1.5 N log N */
#define AGGRESSIVE  4 /* minimum adversary comparison complexity < 1.4 N log N */

/* space-saving abbreviations */
#undef V
#define V void
#undef A
#define A(me) assert(me)

/* need defined names for qsort and qsort_s implementations */
/* also provides declarations for quickselect and quickselect_s */
#if !defined(QSORT_FUNCTION_NAME) || !defined(QUICKSELECT_PIVOT_REMEDIAN_FULL)
# include "quickselect.h"
#endif
#include "exchange.h"           /* irotate protate alignment_size swapn EXCHANGE_SWAP */

/* regular vs. _s variations: */
#if __STDC_WANT_LIB_EXT1__
/* Return type variation */
# define QSORT_RETURN_TYPE errno_t
/* function name variation */
# define FUNCTION_NAME QSORT_S_FUNCTION_NAME
/* nmemb,size argument type variation */
# define NMEMB_SIZE_TYPE rsize_t
/* comparison argument(s) variation */
# define COMPAR_DECL int(*compar)(const void *,const void *,void *),void *context
/* support function comparison arg(s) */
# define COMPAR_ARGS compar,context
/* comparison function call variation */
# define COMPAR(ma,mb,mc) compar(ma,mb,mc)
/* support functions */
# define DEDICATED_SORT dedicated_sort_s
# define FIND_MINMAX_FUNCTION_NAME find_minmax_s
# define FMED3_FUNCTION_NAME fmed3_s
# define PARTITION_FUNCTION_NAME partition_s
# define REMEDIAN_FUNCTION_NAME remedian_s
# define SELECT_MAX_FUNCTION_NAME select_max_s
# define SELECT_MIN_FUNCTION_NAME select_min_s
# define SELECT_MINMAX_FUNCTION_NAME select_minmax_s
# define SELECT_PIVOT_FUNCTION_NAME select_pivot_s
# define QUICKSELECT_FUNCTION_NAME quickselect_s
# define QUICKSELECT_LOOP quickselect_loop_s
# define QUICKSORT_LOOP quicksort_loop_s
#else
# define QSORT_RETURN_TYPE void
# define FUNCTION_NAME QSORT_FUNCTION_NAME
# define NMEMB_SIZE_TYPE size_t
# define COMPAR_DECL int(*compar)(const void *,const void *)
# define COMPAR_ARGS compar
# define COMPAR(ma,mb,mc) compar(ma,mb)
# define DEDICATED_SORT dedicated_sort
# define FMED3_FUNCTION_NAME fmed3
# define FIND_MINMAX_FUNCTION_NAME find_minmax
# define PARTITION_FUNCTION_NAME partition
# define REMEDIAN_FUNCTION_NAME remedian
# define SELECT_MAX_FUNCTION_NAME select_max
# define SELECT_MIN_FUNCTION_NAME select_min
# define SELECT_MINMAX_FUNCTION_NAME select_minmax
# define SELECT_PIVOT_FUNCTION_NAME select_pivot
# define QUICKSELECT_FUNCTION_NAME quickselect
# define QUICKSELECT_LOOP quickselect_loop
# define QUICKSORT_LOOP quicksort_loop
#endif /* __STDC_WANT_LIB_EXT1__ */

/* defined values for pivot_method */
  /* no data movement */
#define QUICKSELECT_PIVOT_REMEDIAN_SAMPLES  0
#define QUICKSELECT_PIVOT_REMEDIAN_FULL     1
  /* alters data order (cannot be used for stable sort/selection) */
#define QUICKSELECT_PIVOT_MEDIAN_OF_MEDIANS 2

/* defined values for partition_method */
  /* partial order not preserved (cannot be used for stable sort/selection) */
#define QUICKSELECT_PARTITION_FAST   0
  /* partial order preserved */
#define QUICKSELECT_PARTITION_STABLE 1

/* structures */
/* regions resulting from partitioning */
struct region_struct {
    size_t first;  /* base array */
    size_t beyond;
    size_t firstk; /* order statistics */
    size_t beyondk;
    unsigned char process; /* 0=false */
};

#define	QUICKSELECT_CONFIG_H_INCLUDED
#endif
