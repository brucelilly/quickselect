.\" Description: quickselect.3 version 1.11 man page 2018-02-24T22:32:49Z
.\" common man macros to V7, V10, DWB2 (unique ones omitted, differences noted)
.\" .TH n c x	V7,10	begin page n of chapter c; x is extra commentary
.\" .TH t s c n	DWB2	beg. pg. t of sect. s; c=extra comment, n=new man. name
.\"			c appears at bottom center of page, n at top center
.\" .SH text		subhead
.\" .SS text		sub-subhead
.\" .B text		make text bold
.\" .I text		make text italic
.\" .SM text		make text 1 point smaller than default
.\" .RI a b		concatenate and alternate Roman, Italic fonts <=6 args
.\" .IR .RB .BR .IB .BI	similar to .RI
.\" .PP			new paragraph
.\" .HP in		hanging paragraph with indent in
.\" .TP in		indented paragraph with hanging tag (on next line)
.\" .IP t in		indented paragraph with hanging tag t (arg 1)
.\" .RS in		increase relative indent by in
.\" .RE k		return to kth relative indent level (1-based)
.\" .DT			default tab settings
.\" .PD v		inter-paragraph spacing v (default 0.4v troff, 1v nroff)
.\" \*R			registered symbol	(Reg.)
.\" \*S			change to default type size
.lg 0	\" avoid groff's butt-ugly ligatures
.nh	\" no hyphenation
.EQ
delim $$
.EN
.ds ]W \" no 7th Edition designation
.\" package name in string xx
.ds xx quickselect
.\" copyright year(s) in string xy
.ds xy "2016-2018
.TH \*(xx 3 ""
.SH NAME	\" 1 line	name \- explanatory text
.B \*(xx
\- multiple selection of order statistics and sorting
.SH SYNOPSIS
.nh	\" no hyphenation
\fB#include <\*(xx.h>\fP
.PP
.B unsigned int \*(xx_options(void);
.PP
.B int \*(xx(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *), size_t *pk, size_t nk, unsigned int options);
.PP
.B errno_t \*(xx_s(void *base, rsize_t nmemb, rsize_t size, int (*compar)(const void *, const void *, void *), void *context, size_t *pk, size_t nk, unsigned int options);
'\" QUICKSELECT_EXTERN void quickselect(/*const*/ void *, size_t, /*const*/ size_t, int (*)(const void *, const void *), /*const*/ size_t /*const*/ *, /*const*/ size_t, unsigned int);
'\" QUICKSELECT_EXTERN void QSORT_FUNCTION_NAME(void *, size_t, size_t, int (*)(const void *, const void *));
.PP
.B void QSORT_FUNCTION_NAME(void *base, size_t nmemb, size_t size, int (*compar)(const void , const void *));
.PP
.B errno_t QSORT_S_FUNCTION_NAME(void *base, rsize_t nmemb, rsize_t size, int (*compar)(const void *, const void *, void *), void *context);
'\" QUICKSELECT_EXTERN errno_t QSORT_S_FUNCTION_NAME(/*const*/ void *, rsize_t, /*const*/ rsize_t, int (*)(const void *, const void *, void *), /*const*/ void *);
.PP
.SH DESCRIPTION
The
.B \*(xx
function
implements
multiple selection of order statistics.
Given an array
.B pk
of
.B nk
.I size_t
elements representing
0\-based
order statistic ranks,
.B \*(xx
partially orders the array
.B base
(having
.B nmemb
elements of size
.BR size )
such that the
specified order statistics are
in\-place
in the array.
If
.B pk
is
.I NULL
or
.B nk
is 0UL,
a full sort of the array is performed.
.PP
Function
.B compar
is provided by the caller,
and should return a value
less than zero,
equal to zero,
or
greater than zero
when the array element pointed to by the first argument is
less than, equal to, or greater than
the array element pointed to by the second argument.
'\" .PP
'\" The
'\" .B swapf
'\" pointer points to a caller\-supplied
'\" function which swaps two array elements.
'\" If
'\" .B swapf
'\" is
'\" .IR NULL ,
'\" a suitable default function is provided.
.PP
The
.B options
argument
affects operation by bitwise or'ing
any of the following components:
.IP QUICKSELECT_STABLE 0.5i
causes sorting or selection to preserve partial order present in the input.
There is a substantial performance penalty; the default operation
does not guarantee preservation of partial order.
.IP QUICKSELECT_OPTIMIZE_COMPARISONS 0.5i
uses minimum-comparison methods
and is suitable if the comparison function
.B compar
is known to be relatively expensive.
The default operation attempts to minimize
run\-time for simple comparisons.
.IP QUICKSELECT_INDIRECT 0.5i
allocates an array of pointers and initializes it to
point to elements in the
.B base
array.
Sorting or selection then proceeds by
dereferencing the pointers for comparisons
(using the user-supplied
.B compar
function, and caching dereferenced pointers
where practical), finally rearranging
.B base
array elements and freeing the allocated pointers.
Direct sorting or selection is used if memeory
cannot be allocated for the pointers.
Caching of dereferenced pointers provides a tiny
performance gain compared to caller indirection
(the comparison function in that case would do the
dereferencing, and caching (e.g. the pivot element
used for partitioning) would not be possible).
Rearranging
.B base
array elements after sorting the pointers
saves considerable data movement
(moving only pointers during sorting or selection,
and moving each
.B base
array element one time to its correct position
is considerably less overall data movement than moving
.B base
array elements during sorting or selection if
.B size
is appreciably larger than a pointer).
However, the final data movement has poor
locality of access for random inputs,
which may cause poor performance when the data array
(the product of element
.B size
and the number of elements
.BR nmemb )
is large relative to cache size.
The primary advantage of internal indirection
is caller convenience: the caller provides a normal
.B compar
function rather than one which dereferences pointers;
allocating, initializing, and freeing the pointers
is handled transparently to the caller, fallback to
direct sorting is also automatic, and the final
.I O(N)
.B base
array reordering is efficient (though not cache-friendly).
.PP
Options may have been limited at library compile time
to more restrictive values than those found in
.IR \*(xx.h .
Function
.B \*(xx_options
may be called to determine the options available at run-time:
bits not present in the returned value provided from
.B \*(xx_options
should not be included in the
.I options
argument to
.BR \*(xx ;
they will cause
.B \*(xx
to fail and set
.I errno
to
.BR EINVAL .
.PP
.SH RETURN VALUES
none for QSORT_FUNCTION_NAME.
.B \*(xx
returns zero on normal execution
and
'\"  a non-zero value
sets the global variable
.I errno
to
.B EINVAL
and returns that value
if there is an argument error.
If 
.B __STDC_WANT_LIB_EXT1__
is defined with non-zero value when
.I \*(xx.h
is included,
\*(xx_s
and
QSORT_S_FUNCTION_NAME
are provided, which
return zero on normal exection
and non-zero if there is an argument error.
Arguments
.B nmemb
and
.B size
are compared to
.BR RSIZE_MAX ,
and
.B compar
is compared to
.BR NULL .
In addition,
the comparison function
.B compar
is expected to take a third argument,
which is provided by the
.B contect
argument.
.SH ERRORS
If
.B base
is
.IR NULL ,
.B nmemb
is
0UL,
.B size
is
0UL,
.B compar
is
.IR NULL ,
or
.B options
requests unavailable options,
the global variable
.I errno
is set to
.BR EINVAL .
.SH EXAMPLES
.PP
#include "\*(xx.h"
.br
#include <errno.h>
.br
int r;
.br
size_t karray[2];
.br
unsigned int options;
.br
karray[0] = (nmemb-1UL)/2UL;
.br
karray[1] = nmemb/2UL;
.br
options = \*(xx_options();
.br

.br
r=\*(xx(base, nmemb, size, compar, NULL, karray, 2UL, 0U);
.br

.br
places the median
.RB ( nmemb \0odd)
or medians
.RB ( nmemb \0even)
in the middle
element(s) of the array
pointed to by
.BR base.
Refer to the BUGS and CAVEATS section
regarding duplicated order statistic ranks.
.br

.br
(void)\*(xx(base, nmemb, size, compar, NULL, NULL, 0UL, 0U);
.br

.br
sorts the array, and is equivalent to
.br
QSORT_FUNCTION_NAME(base, nmemb, size, compar);
.br

.br
errno = 0;
.br
r=\*(xx(base, nmemb, size, compar, NULL, NULL, 0UL, QUICKSELECT_STABLE);
.br

.br
requests a stable sort;
if that option is unavailable,
the array
.B base
will be unaltered, and
.I r
and
.I errno
will be set to
.BR EINVAL .
.br

.br
r=\*(xx(base, nmemb, size, compar, NULL, NULL, 0UL, options & QUICKSELECT_STABLE);
.br

.br
requests a stable sort
if that option is available,
avoiding error return
if the option is unavailable.
.PP
.SH APPLICATION USAGE
If the macro
.B QSORT_FUNCTION_NAME
is defined before
.I \*(xx.h
is included
when compiling the
.I \*(xx.c
source,
a sorting function with the same semantics as
.B qsort
is generated,
using the specified name.
A library implementation of
.B qsort
may be generated by defining
.B QSORT_FUNCTION_NAME
as
.BR qsort .
.SH RATIONALE
While many libraries include a standard
.B qsort
function,
those
.B qsort
implementations may tend to
quadratic performance on adverse inputs.
Many implementations exhibit poor performance for
some types of structured input sequences,
such as reverse-sorted
or
rotated
sequences.
Most
.B qsort
implementations provide
no guarantee of stablilty
(in the sense of preservation of partial order),
and there is no
'\" means of providing an
'\" optimized element swapping function
.\" or
means to adjust the algorithm to
compensate for expensive comparisons or swaps.
Few libraries provide a function for selection of order statistics.
Those libraries that do provide a selection function
usually only permit selection of a single order statistic per function call.
.SH BUGS and CAVEATS
Array
.B pk
may be sorted by
.B \*(xx
and therefore initially unsorted order statistic ranks may be permuted
by a call to
.BR \*(xx .
It is recommended
(but not required)
that the order statistics array
.B pk
be supplied in sorted order.
.PP
If array
.B pk
contains duplicated ranks,
those duplicates will be ignored
during processing and will be
grouped together by sorting after
processing.
This may be expensive if a large
number of order statistics are specified
and there is at least one duplicate.
It is recommended
(but not required)
that the order statistics array
.B pk
contain no duplicates.
.PP
.B \*(xx 
has expected and worst\-case linear complexity for finding a single order statistic.
Worst\-case non-stable selection of multiple order statistics is linearithmic.
.B \*(xx 
has expected and worst\-case linearithmic complexity for non-stable sorting.
.PP
When stable sorting or selection is specified by setting
.BR QUICKSELECT_STABLE ,
selection may become linearithmic and
sorting may become $O(N log sup 2 N)$
due to additional data movement
(the complexity of comparisons is unchanged).
Moreover, locality of access may be poor,
resulting in performance deterioration due to cache size effects.
Sorting and selection may remain in\-place,
or additional size\-related temporary memory may be used if available.
.PP
Compiled library code might have been built with
.B QUICKSELECT_STABLE
and/or
.B QUICKSELECT_INDIRECT
set to values other than those which appear in
.IR \*(xx.h .
If the library was built without the option
to sort or select while maintaining partial order
stability, specifying
.B QUICKSELECT_STABLE
in
.I options
will not be effective;
\*(xx will set
.I errno
to
.B EINVAL
and the array will not be sorted.
Likewise for
.BR QUICKSELECT_INDIRECT .
It is strongly recommended to call
.I \*(xx_options
to determine which option bits are available.
Compiled options may also be determined
by running external programs such as
.I what
or
.I ident
on the library archive containing
.IR \*(xx ;
suitable strings indicating compile\-time
build options are encoded
in the object files.
.SH FUTURE DIRECTIONS
none
.SH SEE ALSO
qsort,
what,
ident
.SH CHANGE HISTORY
Function implementation initial version June 2016.
Implementation backward\-compatible updates through February 2018.
.PP
Manual page initial version January 2017.
Latest manual page update February 2018.
.SH AUTHOR
Bruce Lilly <bruce.lilly@gmail.com>
.SH LICENSE
.PP
The following license covers this software, including makefiles and documentation:
.PP
This software is covered by the zlib/libpng license.
.br
The zlib/libpng license is a recognized open source license by the
Open Source Initiative: http://opensource.org/licenses/Zlib
.br
The zlib/libpng license is a recognized \(dqfree\(dq software license by the
Free Software Foundation: https://directory.fsf.org/wiki/License:Zlib
.br
.lt +0.6i
.po 0.7i
.tl '*************** 'Copyright notice (part of the license)'***************'
.po
.lt
.br
@(#)quickselect.3 1.11 2018-02-24T22:32:49Z copyright \*(xy Bruce Lilly
.br
This software is provided 'as-is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising from the
use of this software.
.PP
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it freely,
subject to the following restrictions:
.IP 1. 0.3i
The origin of this software must not be misrepresented; you must not claim
that you wrote the original software. If you use this software in a
product, an acknowledgment in the product documentation would be
appreciated but is not required.
.IP 2. 0.3i
Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
.IP 3. 0.3i
This notice may not be removed or altered from any source distribution.
.RS 0
.lt +0.6i
.po 0.7i
.tl '*************************'(end of license)'*************************'
.po
.lt
.PP
You may send bug reports to bruce.lilly@gmail.com with subject "\*(xx".
.\" maintenance note: master file  /data/projects/automation/940/lib/libmedian/man/s.quickselect.3
