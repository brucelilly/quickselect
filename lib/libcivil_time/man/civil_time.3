.\" Description: civil_time.3 version 2.1 man page 2015-10-01T03:24:50Z
.\" common man macros to V7, V10, DWB2 (unique ones omitted, differences noted)
.\" .TH n c x	V7,10	begin page n of chapter c; x is extra commentary
.\" .TH t s c n	DWB2	beg. pg. t of sect. s; c=extra comment, n=new man. name
.\"			c appears at bottom center of page, n at top center
.\" .SH text		subhead
.\" .SS text		sub-subhead
.\" .B text		make text bold
.\" .I text		make text italic
.\" .SM text		make text 1 point smaller than default
.\" .RI a b		concatenate and alternate Roman, Italic fonts <=6 args
.\" .IR .RB .BR .IB .BI	similar to .RI
.\" .PP			new paragraph
.\" .HP in		hanging paragraph with indent in
.\" .TP in		indented paragraph with hanging tag (on next line)
.\" .IP t in		indented paragraph with hanging tag t (arg 1)
.\" .RS in		increase relative indent by in
.\" .RE k		return to kth relative indent level (1-based)
.\" .DT			default tab settings
.\" .PD v		inter-paragraph spacing v (default 0.4v troff, 1v nroff)
.\" \*R			registered symbol	(Reg.)
.\" \*S			change to default type size
.lg 0	\" avoid groff's butt-ugly ligatures
.nh	\" no hyphenation
.ds ]W \" no 7th Edition designation
.ds xx civil_time
.ds xy "2009 - 2015
.TH \*(xx 3 ""
.SH NAME	\" 1 line	name \- explanatory text
.B \*(xx
\- parse and print standard date\-time text
.SH SYNOPSIS
\fB#include <\*(xx.h>\fP
.PP
.B int parse_civil_time_text(const char *s,
.B struct civil_time_struct *pcts_result,
.B char **ppe,
.B int which,
.B const struct civil_time_struct *pcts_ref,
.B void (*)(int, void *, const char *, ...),
.B void *);
.PP
.B int sn_date_time(char *buf,
.B int sz,
.B struct civil_time_struct *pcts,
.B int year_digits,
.B const char *date_sep,
.B const char *date_time_sep,
.B const char *time_sep,
.B const char *utc_zone,
.B const char *offset_sep,
.B int precision,
.B int do_utc,
.B int do_yday
.B void (*)(int, void *, const char *, ...),
.B void *);
.PP
.B int sn_civil_time(char *buf,
.B int sz,
.B struct civil_time_struct *pcts,
.B int precision,
.B int do_utc,
.B int do_yday
.B void (*)(int, void *, const char *, ...),
.B void *);
.PP
.B void civil_time_normalize(struct civil_time_struct *,
.B void (*)(int, void *, const char *, ...),
.B void *);
.PP
.B void civil_time_zone_change(struct civil_time_struct *,
.B double,
.B void (*)(int, void *, const char *, ...),
.B void *);
.PP
.B void civil_time_cpy(const struct civil_time_struct *,
.B struct civil_time_struct *,
.B void (*)(int, void *, const char *, ...),
.B void *);
.PP
.B int civil_time_cmp(const struct civil_time_struct *,
.B const struct civil_time_struct *);
.PP
.B double civil_time_difference(const struct civil_time_struct *,
.B const struct civil_time_struct *,
.B void (*)(int, void *, const char *, ...),
.B void *);
.PP
.SH DESCRIPTION
.nh	\" no hyphenation
The
.B civil_time
functions convert
between
machine numerical representation
of date\-time
and
standard
text representations
of date\-time,
and
provide information about
date\-times
in
machine numerical representation.
The standard
text representations
of date\-time
are those specified by
the following
standards
documents:
.PP
.B CCSDS 301.0\-B\-4 section 3.5 type A and B formats
.br
http://public.ccsds.org/publications/archive/301x0b4e1.pdf
.PP
.B RFC 3339
.br
https://www.ietf.org/rfc/rfc3339.txt
.PP
.B EDSC EX000013.1
.br
Http://www.exchangenetwork.net/standards/
Rep_Date_Time_01_06_2006_Final.pdf
.PP
The
machine numerical representation
of date\-time
used by the
.B civil_time
functions
provides for representation
of date\-time
for the foreseeable future,
including leap seconds,
with local time offset from UTC specified,
and with resolution to
femtosecond
precision on most systems.
It
consists of three components:
.PP
.B struct tm
as defined in
.I <time.h>
which provides year, month, mday, etc.
without running into integer overflow limits
for the foreseeable future,
and which has provision for representing leap seconds
.PP
a double\-precision floating\-point variable to hold
fractions of a second
.PP
a
double\-precision floating\-point
variable specifying local time
offset from UTC
in seconds.
.PP
.B civil_time_normalize
normalizes
the numerical machine representation
so that
all components
are within
their normal bounds.
.PP
.B civil_time_zone_change
converts a
numerical machine representation
from its
originally\-specified
zone offset
to a
new offset.
.PP
.B civil_time_cpy
copies
the first
numerical machine representation
to the second.
.PP
.B civil_time_cmp
compares
one
numerical machine representation
to another.
It returns a value
less than zero,
equal to zero,
or
greater than zero
according to whether
the first
numerical machine representation
is
earlier than,
the same as (within machine resolution of fractional seconds),
or
later than
the second
numerical machine representation,
respectively.
.PP
.B civil_time_difference
computes
the time difference
(in seconds)
between the two specified
numerical machine representations.
.PP
All functions except
.B civil_time_cmp
take as the final two arguments
an optional pointer to a logging function
and
a pointer to
logging configuration data.
See
.B logger(3)
for details.
.SH EXAMPLES
.PP
The leap second which occurred
in mid\-2012
as observed in New York City
can be represented by
.PP
an offset
from UTC
of
14440.0 seconds
.PP
A
.B struct tm
with the following components:
.br
tm_year = 112 (2012 \- 1900)
.br
tm_mon = 5 (June)
.br
tm_mday = 30
.br
tm_hour = 19 (local time)
.br
tm_min = 59
.br
tm_sec = 60
.PP
Given these values and a fraction of 0.0,
.B sn_civil_time
can produce
.PP
"2012\-06\-30T23:59:60Z" (with do_utc non\-zero and do_yday zero)
or
"2012\-06\-30T19:59:60\-04:00" (with do_utc and do_yday both set to zero).
.PP
.B parse_civil_time_text
will generate the above data
values
given the latter text string.
.PP
.SH RETURN VALUE
.B sn_civil_time
returns the number of characters written to buf
(not counting terminating '\\0')
if buf was not NULL and sz was large enough;
size required of buf
(including space for terminating '\\0')
if buf is NULL or sz is too small;
negative on error, with errno set.
.PP
.B parse_civil_time_text
returns zero on successful parsing,
\-1 on error (with errno set).
.SH APPLICATION USAGE
The
.B \*(xx
functions
provide a means of
transferring date and time data
between machines
as
human\-readable
text streams,
independent of
issues such as
machine word size and byte order.
The formats
are standardized
with publicly\-accessible standards documents
readily available
at little or no cost.
The
.B \*(xx
functions
can also provide
machine\-readable
records of historical
date\-time points which cannot
be represented in the
standardized text formats.
.SH RATIONALE
While
.I strftime
and
.I scanftime
might be usable for date and time
transfer,
they are
in a sense too flexible;
one can write in a format which
may be misinterpreted or unparseable
by the other.
On the other hand,
some implementations
of
.I strftime
lack the ability to
produce
standards\-conforming
text formats.
There are also
numerous
implementation
variances.
.SH BUGS and CAVEATS
There are differences in what
various
text format standards allow;
due care should be exercised when generating text date\-time representations.
.PP
Leap seconds are permitted at the end of any June or December (UTC),
even if there in fact was not (or will not be)
a leap second at that time.
.SH SEE ALSO
.IR leap_second ,
.IR logger ,
.IR snl ,
.IR snf ,
.IR strntol ,
.IR utc_mktime .
.PP
The standards referenced in the above
.B DESCRIPTION
section.
.PP
IERS Bulletin C
.br
https://www.iers.org/SharedDocs/News/EN/BulletinC.html
.br
ftp://hpiers.obspm.fr/iers/bul/bulc/bulletinc.dat
.PP
ftp://hpiers.obspm.fr/iers/bul/bulc/BULLETINC.GUIDE
.PP
https://hpiers.obspm.fr/eop\-pc/index.php?index=TAI\-UTC_tab&lang=en
.PP
https://itunews.itu.int/En/4268\-Leap\-seconds\-BRRole\-of\-the\-
.br
International\-Earth\-Rotation\-and\-Reference\-Systems\-Service.note.aspx
.PP
https://www.ucolick.org/~sla/leapsecs/amsci.html
.PP
https://www.ucolick.org/~sla/leapsecs/timescales.html
.PP
https://www.ucolick.org/~sla/leapsecs/dutc.html
.PP
https://www.iana.org/time\-zones
.PP
https://github.com/eggert/tz/blob/master/README
.PP
.SH AUTHOR
Bruce Lilly <bruce.lilly@gmail.com>
.SH LICENSE
.PP
The following license covers this software, including makefiles and documentation:
.PP
This software is covered by the zlib/libpng license.
.br
The zlib/libpng license is a recognized open source license by the
Open Source Initiative: http://opensource.org/licenses/Zlib
.br
The zlib/libpng license is a recognized \(dqfree\(dq software license by the
Free Software Foundation: https://directory.fsf.org/wiki/License:Zlib
.br
.lt +0.6i
.po 0.7i
.tl '*************** 'Copyright notice (part of the license)'***************'
.po
.lt
.br
@(#)civil_time.3 2.1 2015-10-01T03:24:50Z copyright \*(xy Bruce Lilly
.br
This software is provided 'as-is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising from the
use of this software.
.PP
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it freely,
subject to the following restrictions:
.IP 1. 0.3i
The origin of this software must not be misrepresented; you must not claim
that you wrote the original software. If you use this software in a
product, an acknowledgment in the product documentation would be
appreciated but is not required.
.IP 2. 0.3i
Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
.IP 3. 0.3i
This notice may not be removed or altered from any source distribution.
.RS 0
.lt +0.6i
.po 0.7i
.tl '*************************'(end of license)'*************************'
.po
.lt
.PP
You may send bug reports to bruce.lilly@gmail.com with subject "\*(xx".
.\" maintenance note: master file /src/relaymail/lib/libcivil_time/man/s.civil_time.3
