# Description: makefile that includes other makefiles

# The following license covers this software, including makefiles and documentation:
# This software is covered by the zlib/libpng license.
# The zlib/libpng license is a recognized open source license by the
# Open Source Initiative: http://opensource.org/licenses/Zlib
# The zlib/libpng license is a recognized "\"free\"" software license by the
# Free Software Foundation: https://directory.fsf.org/wiki/License:Zlib
################### Copyright notice (part of the license) ###################
#$Id: ~\|^` @(#)%M% copyright 2016 %Q%. \ makefile.include1 $
# This software is provided 'as-is', without any express or implied warranty.
# In no event will the authors be held liable for any damages arising from the
# use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it freely,
# subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not claim
#    that you wrote the original software. If you use this software in a
#    product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
#
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
#
# 3. This notice may not be removed or altered from any source distribution.
############################## (end of license) ##############################
# This is %M% version %I% dated %O%.
# You may send bug reports for makefiles to %Y% with subject \"makefiles\".
#############################################################################
# maintenance note: master file  %P%

# Add makefile name to MAKEFILES_READ macro
MAKEFILES_READ += makefile.include1
# append macro name to MACROS macro
MACROS += MAKEFILES_READ

# broken dmake overrides $(OS) in an undocumented manner
#	dmake by default ignores environment variables (requires
#	   non-standard -E command-line flag option) and sets $(OS) to
#	   something like "unix"
#		this is one reason why there are makefile.stage?,
#		  makefile.include? files
#		work-around is setting environment via makefile and
#		  scripts/shell/ident.sh, makefile.include1,
#		  then re-run $(MAKE) [defined as 'dmake -E') with
#		  makefile.stage2 and makefile.include2 as well as
#		  makefile.include1
# gmake fails if some included file doesn't exist (bootstrapping fails)
#	  (reported gmake bug #47399)
#	work-around is multiple runs to build files to be included
#		this is why there are makefile.stage?, makefile.include? files

# MAKEFILES_DIR not yet deined...
include makefile.directories
# defines MAKEFILES_DIR

# Add makefile path to .PRECIOUS pseudo-target
.PRECIOUS : $(MAKEFILES_DIR)/makefile.include1

include $(MAKEFILES_DIR)/makefile.make

# supported OSes
SUPPORTED_OSES = freebsd linux netbsd solaris
MACROS += SUPPORTED_OSES

# pseudo-targets that are included at each stage:
FAKE_TARGETS += NO_FAKE_TARGETS ALWAYS
MACROS += FAKE_TARGETS
NO_FAKE_TARGETS : ALWAYS
	@echo 'FAKE_TARGETS are: ' $(FAKE_TARGETS)
	@for file in $(FAKE_TARGETS) indent lint no-such-file EMIT_LICENSES INSTALLED_CONFIGFILES INSTALLED_HELPFILES INSTALLED_MAN_PAGES INSTALLED_RESOURCEFILES ;\
	do	if test -d $${file} ; then rm -rf '$${file}' ; fi ;\
		if test -f $${file} ; then rm -f '$${file}' ; fi ;\
	done

ALWAYS :
	@: # dummy target to force build
