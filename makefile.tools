#  This is the description file used by the make command; tools-specification file

# The following license covers this software, including makefiles and documentation:
# This software is covered by the zlib/libpng license.
# The zlib/libpng license is a recognized open source license by the
# Open Source Initiative: http://opensource.org/licenses/Zlib
# The zlib/libpng license is a recognized "\"free\"" software license by the
# Free Software Foundation: https://directory.fsf.org/wiki/License:Zlib
################### Copyright notice (part of the license) ###################
#$Id: ~\|^` @(#)%M% copyright 2015 - 2016 %Q%. \ makefile.tools $
# This software is provided 'as-is', without any express or implied warranty.
# In no event will the authors be held liable for any damages arising from the
# use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it freely,
# subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not claim
#    that you wrote the original software. If you use this software in a
#    product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
#
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
#
# 3. This notice may not be removed or altered from any source distribution.
############################## (end of license) ##############################
# This is %M% version %I% dated %O%.
# You may send bug reports for makefiles to %Y% with subject \"makefiles\".
#############################################################################
# maintenance note: master file  %P%

# This file lists tools used for building.

# (All Macro Definitions are described on line preceding definition)

# Add makefile name to .PRECIOUS pseudo-target and to MAKEFILES_READ macro
.PRECIOUS : $(MAKEFILES_DIR)/makefile.TOOLS
MAKEFILES_READ += makefile.TOOLS

# C compiler choice
# pick one, leave the others as comments
# full path is OK, as long as the basename is one of the supported compilers
SUPPORTED_COMPILERS = suncc clang pcc gcc
# SunStudio12
#CC = suncc
#XTRAS += -xtarget=native64 -xchip=core2
#LDFLAGS += -xtarget=native64 -xchip=core2
# llvm-clang
#CC = clang
# Portable C Compiler
#CC = pcc
# GNU Compiler Collection
CC = gcc

# Do not change the following line (it is used by `make macros` for debugging).
MACROS += SUPPORTED_COMPILERS CC

# Obtain the basename for the compiler for including the
#   compiler-specific makefile and for constructing the platform ARCHDIR
#     string (in case the value of the CC macro is a full path).
# Because dmake has no mechanism for running programs to build a macro,
#   and because the gmake and bmake mechanisms are non-portable, a
#   separate file is generated here and included via one of the
#   makefile.include? files

# dependencies for makefile.ccbase-$(OS)-$(FQDN)
# NetBSD /usr/bin/make gets lost easily; it needs the full path to the makefiles
$(MAKEFILES_DIR)/makefile.ccbase-$(OS)-$(FQDN) : \
 $(SCRIPTSDIR)/date.sh $(SCRIPTSDIR)/host.sh $(SCRIPTSDIR)/ident.sh \
 $(SCRIPTSDIR)/network.sh $(SCRIPTSDIR)/system.sh $(SCRIPTSDIR)/time.sh \
 $(SCRIPTSDIR)/zone.sh \
 $(MAKEFILES_DIR)/makefile $(MAKEFILES_DIR)/makefile.include1 \
  $(MAKEFILES_DIR)/makefile.directories $(MAKEFILES_DIR)/makefile.make \
 $(MAKEFILES_DIR)/makefile.stage2 $(MAKEFILES_DIR)/makefile.include2 \
  $(MAKEFILES_DIR)/makefile.$(OS) $(MAKEFILES_DIR)/makefile.project \
  $(MAKEFILES_DIR)/makefile.fqdn $(MAKEFILES_DIR)/makefile.tools \
  $(MAKEFILES_DIR)/makefile.$(OS)-$(FQDN)

# recipe for makefile.ccbase-$(OS)-$(FQDN)
# NetBSD /usr/bin/make doesn't use $(SHELL), and therefore botches the shell
#  built-in "print"; workaround is to use the inferior "echo"
$(MAKEFILES_DIR)/makefile.ccbase-$(OS)-$(FQDN) : 
	> $@.$${PPID}.temp
	@echo "# $@ generated on host $(FQDN) running OS $(OS) at $(DATE_TIME) from $(MAKEFILES_READ)" >> $@.$${PPID}.temp
	@echo "" >> $@.$${PPID}.temp
	@echo "# $@ rebuilt when out-of-date with respect to: $?" >> $@.$${PPID}.temp
	@if test -n "$?" ; then ( gls -lrt --full-time $? 2>/dev/null || ls -lrt --full-time $? 2>/dev/null || ls -lrtT $? 2>/dev/null || ls -lrt $? ) | sed -e 's/^/# /' >> $@.$${PPID}.temp ; fi
	@echo "" >> $@.$${PPID}.temp
	@echo "# environment:" >> $@.$${PPID}.temp
	@env | sed -e 's/^/# /' >> $@.$${PPID}.temp
	@echo "" >> $@.$${PPID}.temp
	@echo '# CCBASE macro defined as the compiler basename (in case the compiler is' >> $@.$${PPID}.temp
	@echo '#   specified by a full path).  The definition is generated and should not' >> $@.$${PPID}.temp
	@echo '#   be changed here.' >> $@.$${PPID}.temp
	@echo '# For reference, the compiler was specified in' >> $@.$${PPID}.temp
	@echo '#   makefile.TOOLS as CC = "$(CC)".' >> $@.$${PPID}.temp
	@ccbase=`$(BASENAME) $(CC)` ;\
	echo "CCBASE = $${ccbase}" >> $@.$${PPID}.temp ;\
	echo "MACROS += CCBASE" >> $@.$${PPID}.temp ;\
	errs=0 ;\
	if test -n "$${ccbase}" ;\
	then	path=`$(SHELL) -c "whence -v $${ccbase} 2>/dev/null" | awk '{ print $$NF }'` ;\
		if test "$${path}" = "found" ; then path="" ; fi ;\
		if test -z "$${path}" ; then path=`$(SHELL) -c "which -a $${ccbase} 2>/dev/null" | head -1 | awk '{ print $$NF }'` ; fi ;\
		if test -z "$${path}" ; then echo specified compiler $${ccbase} cannot be found ; errs=1 ; fi ;\
	fi ;\
	if test $${errs} -ne 0 ; then rm -f $@.$${PPID}.temp ; exit $${errs} ; fi ;\
	if test ! -f $(MAKEFILES_DIR)/makefile.$${ccbase} ; then\
		echo '# WARNING: "'"$${ccbase}"'" does not correspond to any supported compiler.' >> $@.$${PPID}.temp ;\
		echo '# Supported compilers are: $(SUPPORTED_COMPILERS).' >> $@.$${PPID}.temp ;\
		echo 'ERROR: "'"$${ccbase}"'" does not correspond to any supported compiler.' ;\
		echo 'Supported compilers are: $(SUPPORTED_COMPILERS).' ;\
		exit 1 ;\
	fi
	@if test -s $@.$${PPID}.temp ; then mv -f $@.$${PPID}.temp $@ ; fi

