#  Description: This is the description file used by the make command; compiler-specific definitions for gcc

# The following license covers this software, including makefiles and documentation:
# This software is covered by the zlib/libpng license.
# The zlib/libpng license is a recognized open source license by the
# Open Source Initiative: http://opensource.org/licenses/Zlib
# The zlib/libpng license is a recognized "\"free\"" software license by the
# Free Software Foundation: https://directory.fsf.org/wiki/License:Zlib
################### Copyright notice (part of the license) ###################
#$Id: ~\|^` @(#)%M% copyright 2015 - 2016 %Q%. \ makefile.gcc $
# This software is provided 'as-is', without any express or implied warranty.
# In no event will the authors be held liable for any damages arising from the
# use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it freely,
# subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not claim
#    that you wrote the original software. If you use this software in a
#    product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
#
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
#
# 3. This notice may not be removed or altered from any source distribution.
############################## (end of license) ##############################
# This is %M% version %I% dated %O%.
# You may send bug reports for makefiles to %Y% with subject \"makefiles\".
#############################################################################
# maintenance note: master file  %P%

# this file defines macros specific to a particular compiler toolchain

# Add makefile name to .PRECIOUS pseudo-target and to MAKEFILES_READ macro
.PRECIOUS : $(MAKEFILES_DIR)/makefile.$(CCBASE)
MAKEFILES_READ += makefile.$(CCBASE)

# C and C99 and C11 are essentially different programming languages...
# gcc -std modes: c90, gnu90, iso9899:199409, c99, gnu99, c11, gnu11 (default)
# pre-c99 modes do not define __func__, but it can be defined as __FUNCTION__
#   for compatibility w/o requiring source file modifications
#C = -std=c90 -D__func__=__FUNCTION__
C = -std=c89 -D__func__=__FUNCTION__
#C = -std=gnu90 -D__func__=__FUNCTION__
#C = -std=iso9899:199409 -D__func__=__FUNCTION__

# C99 flags
C99 = -std=c99
#C99 = -std=gnu99
#C99 = -std=c11
#C99 = -std=gnu11

# Some people never learn... 2-digit year numbers are going to be a problem...
# C11 flags (C11 > C99...)
C11 = -std=c11

# flags for making dependency files
MAKE_DEPEND_ARG = -MM

# optimization flag
OPTIMIZE = -Ofast
#OPTIMIZE = -O3
#OPTIMIZE = -O2
#OPTIMIZE = -O1
#OPTIMIZE = -O0

# compiler flags that aren't includes or defines, e.g. -Wxxx
# -std=c89 (etc.) may be overridden by a subsequent [N.B.] -std=c99
#XTRAS += -Wall -Wstrict-prototypes -Wmissing-declarations -Wmissing-prototypes -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wnested-externs -pedantic 
# fail on OpenIndiana "hipster" 64-bit due to -fstack_protector
#XTRAS += -fmessage-length=0 -fstack-protector -funwind-tables -fasynchronous-unwind-tables -Wall -Wstrict-prototypes -Wmissing-declarations -Wmissing-prototypes -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wnested-externs -Wunused -Wl,-s -pedantic 
XTRAS += -fmessage-length=0 -funwind-tables -fasynchronous-unwind-tables -Wall -Wstrict-prototypes -Wmissing-declarations -Wmissing-prototypes -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wnested-externs -Wunused -Wl,-s -pedantic 
#XTRAS += 

# debugging symbols
# -grecord-gcc-switches fails for gcc 4.5.3 on Linux and NetBSD
#DEBUG_SYM = -g -grecord-gcc-switches
#DEBUG_SYM = -g
#DEBUG_SYM = 

# profiling
#PROFILE = -pg
#PROFILE = -pg -fprofile-arcs -ftest-coverage

# if $(CC) can't handle simultaneous -O and -g, comment out DP_OPTIMIZE
#	optimize debugging/profiled code?
DP_OPTIMIZE = $(OPTIMIZE)

# Flags used by C compiler
# Should include $(DEFS) and $(OS_DEFS).
# Should NOT include $(INCLUDE), $(SYS_INCLUDE), or $(OS_INCLUDE)
CFLAGS = $(PROFILE) $(DEBUG_SYM) $(OPTIMIZE) $(DEFS) $(OS_DEFS) $(C) $(XTRAS)
C99FLAGS = $(PROFILE) $(DEBUG_SYM) $(OPTIMIZE) $(DEFS) $(OS_DEFS) $(C99) $(XTRAS)
C11FLAGS = $(PROFILE) $(DEBUG_SYM) $(OPTIMIZE) $(DEFS) $(OS_DEFS) $(C11) $(XTRAS)

# Floating-point option
FFLAG =

# Load flags used by C compiler
LDFLAGS += $(PROFILE) $(DEBUG_SYM) $(STRIP) $(FFLAG)

